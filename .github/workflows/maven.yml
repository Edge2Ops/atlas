#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Java CI with Maven

on:
  push:
    branches: [ automationwf ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
#     - name: Build with Maven
#       run: chmod +x ./build.sh && ./build.sh
#       env:
#         AWS_ACCESS_KEY_ID:  ${{secrets.S3_AWS_ACCESS_KEY_ID}}
#         AWS_SECRET_ACCESS_KEY:  ${{secrets.S3_AWS_SECRET_ACCESS_KEY}}

    - name: Get branch name
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: get_branch

    - run:   echo ::set-env name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
      shell: bash

    - name: Get version tag
      run: echo "##[set-output name=version;]$(echo `git ls-remote https://${{ secrets.my_pat }}@github.com/atlanhq/${REPOSITORY_NAME}.git ${{ steps.get_branch.outputs.branch }} | awk '{ print $1}' | cut -c1-7`)abcd"
      id: get_version

    - name: Create images
      run: |
         docker build --build-arg ACCESS_TOKEN_USR=$GITHUB_ACTOR --build-arg ACCESS_TOKEN_PWD=${{ secrets.my_pat }} -t docker.pkg.github.com/$GITHUB_REPOSITORY/${REPOSITORY_NAME}-${{ steps.get_branch.outputs.branch }}:latest .
         docker tag docker.pkg.github.com/$GITHUB_REPOSITORY/${REPOSITORY_NAME}-${{ steps.get_branch.outputs.branch }}:latest docker.pkg.github.com/$GITHUB_REPOSITORY/${REPOSITORY_NAME}-${{ steps.get_branch.outputs.branch }}:${{ steps.get_version.outputs.version }}
         docker login docker.pkg.github.com -u $GITHUB_ACTOR -p ${{ secrets.my_pat }}
         docker push docker.pkg.github.com/${GITHUB_REPOSITORY}/${REPOSITORY_NAME}-${{ steps.get_branch.outputs.branch }}:latest
         docker push docker.pkg.github.com/${GITHUB_REPOSITORY}/${REPOSITORY_NAME}-${{ steps.get_branch.outputs.branch }}:${{ steps.get_version.outputs.version }}
    - name: Check out into charts repo
      uses: actions/checkout@v2
      with:
        ref: trial
        repository: atlanhq/charts
        token: ${{ secrets.my_pat }}

#     - name: Commit files
#       run: |
#         git log --oneline --decorate>>changelog.md
#         git add changelog.md
#         git config --local user.email "action@github.com"
#         git config --local user.name "GitHub Action"
#         git commit -m "atlas"
#         git push origin trial
# 
#     # Send a slack notification message on the specified channel with the failure github actions workflow report.
#     - name: Slack Notification
#       uses: rtCamp/action-slack-notify@v2.0.0
#       if: failure()
#       env:
#         SLACK_CHANNEL: general
#         SLACK_COLOR: '#3278BD'
#         SLACK_ICON: https://cdn3.iconfinder.com/data/icons/popular-services-brands/512/github-512.png
#         SLACK_MESSAGE: "- @infra, Job ${{ job.status }} :rocket:"
#         SLACK_TITLE: Message
#         SLACK_USERNAME: Github-Actions
#         SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
